<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="/tag/git/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2023-03-05T10:18:42+00:00</updated>
  <id>/tag/git/feed.xml</id>

  
  
  

  
    <title type="html">on-Sync | </title>
  

  
    <subtitle>개발일기</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">JVM 이해하기 (1) - 기본 동작 방식</title>
      <link href="/java-jvm" rel="alternate" type="text/html" title="JVM 이해하기 (1) - 기본 동작 방식" />
      <published>2022-09-11T00:00:00+00:00</published>
      <updated>2022-09-11T00:00:00+00:00</updated>
      <id>/java-jvm</id>
      <content type="html" xml:base="/java-jvm">&lt;h1 id=&quot;jvm-이란-&quot;&gt;JVM 이란 ?&lt;/h1&gt;

&lt;p&gt;JVM 은 Java 의 특징(언어적 개성)을 실현하기 위한 시스템상의 기본 스펙입니다.
JVM 의 구현체는 배포 벤더에 따라 다양합니다.
가장 대표적인 것은 Oracle 의 OpenSource JDK 의 HotSpot 을 말하곤 합니다.
즉, JVM 의 세부구현방식에 따라 차이는 존재할 수 있으나 
기본적인 시스템상의 스펙에 따른 특징은 동일합니다.&lt;/p&gt;

&lt;h2 id=&quot;java-의-특징&quot;&gt;Java 의 특징&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;객체 지향 언어&lt;/li&gt;
  &lt;li&gt;인터프리터 언어&lt;/li&gt;
  &lt;li&gt;독립적인 플랫폼&lt;/li&gt;
  &lt;li&gt;자동 메모리 관리&lt;/li&gt;
  &lt;li&gt;멀티 쓰레딩 지원&lt;/li&gt;
  &lt;li&gt;필요에 따른 동적 로딩&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등등 관점에 따라 더 추가될 수 있지만 기본적으로 위 6 가지 특징으로
이후 설명되는 JVM 구성이 어떤 기능을 위해 설계 되었는지 이해할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;jvm-의-실행-순서&quot;&gt;JVM 의 실행 순서&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;준비 단계
    &lt;ul&gt;
      &lt;li&gt;Compiler&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초기화 단계
    &lt;ul&gt;
      &lt;li&gt;Class Loader&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 단계
    &lt;ul&gt;
      &lt;li&gt;Execution Engine&lt;/li&gt;
      &lt;li&gt;Garbage Collector&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;준비단계---compiler&quot;&gt;준비단계 - Compiler&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인터프리터 언어&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;독립적인 플랫폼&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 소스코드는 JVM 을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 로 컴파일하고, JVM 은 OS 별로 구현체를 달리하여 설치하여
OS 의존성이 아닌 JVM 의존성으로 설치에 따라 극복할 수 있는 구조로 의존성을 약화시킬 수 있습니다.
이때 자바 컴파일러는 CLI 상의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 를 말하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일로 생성됩니다.
일반적으로는 여러 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 를 묶어서 사용하기 위해서 한 단계를 추가하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jar&lt;/code&gt; 형식의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 로 저장, 실행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-compile.png&quot; alt=&quot;jvm-compile.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;초기화-단계---class-loader&quot;&gt;초기화 단계 - Class Loader&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적 클래스 로딩&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;파일형태인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 에 의해 필요에 따라 메모리에 적재(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적 클래스 로딩&lt;/code&gt;)되어 사용됩니다.
여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 는 크게 적재(Loading), 연결(Linking), 초기화(Initiation) 의 세가지 단계에 걸쳐
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime Data Area&lt;/code&gt; 중 프로세스 전역에 걸쳐 사용되는 데이터를 관리하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method Area&lt;/code&gt; 에 저장하게 됩니다.&lt;/p&gt;

&lt;p&gt;적재는 파일로 저장된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 를 분류를 통해 메모리 상에 보관하는 행동을 말합니다.
JVM 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Class Loading&lt;/code&gt; 방식으로 적재를 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Class Loading&lt;/code&gt; 의 종류는 두 가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스의 시작점인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 부터 흐름에 따라 명시된 클래스 동적으로 불러오는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Load-time Dynamic Loading&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class.forName(&quot;className&quot;)&lt;/code&gt; 과 같이 매개변수로 클래스를 불러오는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run-time Dynamic Loading&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;적재되는 정보는 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reflection&lt;/code&gt; 정보인 것을 확인 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Class 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Meta&lt;/code&gt; 정보인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; 와 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inheritance&lt;/code&gt; 정보&lt;/li&gt;
  &lt;li&gt;현재 대상의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt; 과 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; 정보&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Field&lt;/code&gt; 와 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt; 속성의 내부정보&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;클래스 로더의 구조는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-class-loaders.png&quot; alt=&quot;jvm-class-loaders.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스 로더는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delegator&lt;/code&gt; 방식으로 최상의 Bootstrap 부터 User-Defined 까지 순차적으로 각 범위에서 클래스 정보를 탐색합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap Class Loader 는 Object 와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang&lt;/code&gt; 의 기본 정보를 로드하여 기본 클래스 정보를 로드합니다.&lt;/li&gt;
  &lt;li&gt;Extension Class Loader 는 외부 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependencies&lt;/code&gt; 들을 로드합니다.&lt;/li&gt;
  &lt;li&gt;Application Class Loader 는 사용자가 작성한 클래스 정보를 로드합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클래스 로더의 3가지 원칙&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Delegation : 하위는 상위에 책임을 위임하여 검색한 후 자신의 범위에서 검색을 수행하며 자신의 하위에게 결과를 반환합니다.&lt;/li&gt;
  &lt;li&gt;Visibility : 하위는 상위결과를 얻을 수 있지만, 상위는 위임결과만을 반환합니다.&lt;/li&gt;
  &lt;li&gt;Uniqueness : 하위는 적재 과정 중 상위결과를 제외하므로 유일성을 보장합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체 적재 절차는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-class-loaders-process.png&quot; alt=&quot;jvm-class-loaders-process.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Class Loader 가 class-path 에서 클래스를 찾지 못할 경우&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Exception 처리 및 RuntimeError 가 발생하게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Class Loader 가 class-path 에서 클래스를 찾을 경우&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;적재 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 의 정상유무를 검증(Verify)합니다.&lt;/li&gt;
      &lt;li&gt;검증 후에는 메모리 공간을 확보하고 유형에 따른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기본값&lt;/code&gt;을 설정하여 사전준비(Prepare)를 합니다.&lt;/li&gt;
      &lt;li&gt;준비 후에는 클래스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbolic References&lt;/code&gt; 를 위한 주소값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime Constant Pool&lt;/code&gt; 에 설정하여 참조값을 풀이(Resolve)합니다.&lt;/li&gt;
      &lt;li&gt;참조값 설정 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 에 명시된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기값&lt;/code&gt;에 따라 데이터를 셋팅합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>on-Sync</name>
        
        
      </author>

      

      
        <category term="Git" />
      

      
        <summary type="html">JVM 이란 ?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">IntelliJ Plug-In 소개 (1) - GitToolBox</title>
      <link href="/intellij-plugin-gittoolbox" rel="alternate" type="text/html" title="IntelliJ Plug-In 소개 (1) - GitToolBox" />
      <published>2022-09-11T00:00:00+00:00</published>
      <updated>2022-09-11T00:00:00+00:00</updated>
      <id>/intellij-plugin-gittoolbox</id>
      <content type="html" xml:base="/intellij-plugin-gittoolbox">&lt;h1 id=&quot;협업을-위한-플러그인&quot;&gt;협업을 위한 플러그인&lt;/h1&gt;

&lt;p&gt;여러사람이 함께 일하는 프로젝트는 변화가 빈번합니다. &lt;br /&gt;
그 만큼 Tracking 에 신경써야하는 노고와 시간이 필요하고요. &lt;br /&gt;
물론 일하다 보면 놓치는 경우도 많기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitToolBox&lt;/code&gt; 라는 플러그인을 소개 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;gittoolbox-의-기능&quot;&gt;GitToolBox 의 기능&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능은 플러그인의 공식 설명에 대한 요약과 그 예시를 말씀드리겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-git-status&quot;&gt;1. Git status:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;number of ahead / behind commits for current branch as status bar widget
ahead / behind, current branch, tags on HEAD as Project View decoration on modules
status bar widget with detailed information and additional actions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git status 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 의 내용을 다음과 같이 요약하여 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-status.png&quot; alt=&quot;git-status.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 Window 에서 Working Directory 의 정보를 직관적으로 확인할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;현재 브랜치 이름 (Current Head)&lt;/li&gt;
      &lt;li&gt;변경된 파일 수 (Changes File Count)&lt;/li&gt;
      &lt;li&gt;Remote 와 Local 의 차이 (Revision Diff)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 예시를 설명해 보겠습니다. &lt;br /&gt;
현재 Working Directory 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치를 Check out 한 상태입니다. &lt;br /&gt;
Remote 와 비교해서 Local 의 Revision 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;개 Commit 로 앞선 상태이기도 합니다. &lt;br /&gt;
마지막으로 현재 작업(변경) 중인 파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;개가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-git-blame&quot;&gt;2. Git blame:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inline blame - show blame for line at caret in active editor
blame details balloon for line at caret
status bar widget with detailed information and additional actions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git Blame 기능은 IntelliJ 에서 기본으로 제공하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-blame-origin.png&quot; alt=&quot;git-blame-origin.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단, 위 예시와 같이 현재 라인의 변경사유를 확인하려면 개별 Window 를 열어야 하는 번거로움이 있습니다.
이러한 불편함을 줄이기 위해 동적인 balloon 을 다음과 같이 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-blame-gittoolbox.png&quot; alt=&quot;git-blame-gittoolbox.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;작업자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Git Blame&lt;/code&gt; 으로 Editor 의 공간낭비를 하지 않아도 되고, 직관적으로 마지막 변경사유를 확인할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-auto-fetch&quot;&gt;3. Auto fetch:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;runs git fetch at fixed intervals
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch 자동화&lt;/code&gt;는 제가 GitToolBox 를 쓰는 가장 큰 이유입니다.
Git 은 Remote 의 최신 변경사항을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 를 통해 확인합니다.
&lt;strong&gt;Local 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 를 수행하지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; 필요 여부를 모르게 됩니다.&lt;/strong&gt;
이때 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt; 를 진행하면 예기치 못한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conflict&lt;/code&gt; 를 맞이하게 됩니다.
그렇게 되면 사용자는 본인의 브랜치에서 커밋을 재 정비해야하고,
Remote 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Force 권한&lt;/code&gt; 이 없다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Owner&lt;/code&gt; 에게 번거로운 요청을 하게 될 것입니다.
여러 작업자가 동시에 프로젝트를 진행한다면 이런 경우는 더욱 빈번할 수도 있고요.
그렇기에 협업에서 Git Remote 에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch &amp;amp; update&lt;/code&gt; 는 중요하고,
이를 판단하기 위해 사용자는 항상 Remote 의 변경유무를 인지해야합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-push-tags-on-current-branch&quot;&gt;4. Push tags on current branch:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;available in VCS / Git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;IntelliJ 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git &amp;gt; Push&lt;/code&gt; 에서도 지원하는 기능입니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-behind-tracker&quot;&gt;5. Behind tracker&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shows notification when behind count of current branch changes and is non-zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능 1번에서 설명한 파일 변경 수에 대한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;6-branch-name-completion-in-commit-dialog&quot;&gt;6. Branch name completion in Commit dialog:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provides branch name completion inside Commit dialog message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;snippet 과 같이 dropbox 를 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-message-auto-complete.png&quot; alt=&quot;git-message-auto-complete.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-gitmoji-completion-in-commit-dialog&quot;&gt;7. Gitmoji completion in Commit dialog:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provides gitmoji completion inside Commit dialog message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능 6번과 동일한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;8-recent-branches-switcher&quot;&gt;8. Recent branches switcher&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch between recently used branches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt + ` &amp;gt; 7&lt;/code&gt; 을 단순화 시킨 기능입니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;9-outdated-branches-cleanup&quot;&gt;9. Outdated branches cleanup&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find and remove merged and stale branches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오래된 브랜치를 삭제합니다. &lt;br /&gt;
Merge 되지 않은 브랜치는 문답을 확인을 요청합니다.
자동화를 위해 시간단위 주기를 설정할 수 있습니다.
저는 위험하다고 생각해서 사용하지 않습니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;10-git-extender-integration&quot;&gt;10. Git Extender integration&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;can be selected as update action executed from behind tracker popup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;1번 기능이 우측하단에 표시되며, 클릭시 확장통합을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh Status&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fetch&lt;/code&gt; 등의 기능을 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-extender.png&quot; alt=&quot;git-extender.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rebase&lt;/code&gt; 를 선택할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-update-action.png&quot; alt=&quot;git-update-action.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 기능은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pannel&lt;/code&gt; 이 아닌 우측하단의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popup&lt;/code&gt; 기능을 활용할 수 있다는 것이 특징입니다.&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>on-Sync</name>
        
        
      </author>

      

      
        <category term="IntelliJ" />
      
        <category term="Plug-In" />
      
        <category term="Git" />
      

      
        <summary type="html">협업을 위한 플러그인</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git 설정하기 (2) - 설정 공유하기</title>
      <link href="/git-config-share" rel="alternate" type="text/html" title="Git 설정하기 (2) - 설정 공유하기" />
      <published>2022-09-11T00:00:00+00:00</published>
      <updated>2022-09-11T00:00:00+00:00</updated>
      <id>/git-config-share</id>
      <content type="html" xml:base="/git-config-share">&lt;h1 id=&quot;설정공유&quot;&gt;설정공유&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이전 글에서 설정들은 개발자 개인환경에서 적용해야하는 설정입니다.&lt;br /&gt;
개인별로 적용하다보면 실수가 있기 마련입니다.&lt;br /&gt;
이를 방지하는 방법으로 다음 방법이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitconfig&quot;&gt;.gitconfig&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;설정정보를 공유하기 위해서는 저장소에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; 로 등록합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local include.path .gitconfig&lt;/code&gt; 명령을 수행하여 같은 환경을 적용할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;(가능하면 프로그램의 PreRun 에서 git config 를 자동 수행하도록 구성하는 것도 좋습니다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;글로벌 설정은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; 파일의 내용으로 공유할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;프로젝트별로 다른 설정이 필요할 수도 있기에 상황에 따라 사용합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만 이 방법은 자동적용이 안되므로 다음 방법을 활용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitattributes-설정-상세참고&quot;&gt;.gitattributes (&lt;a href=&quot;https://git-scm.com/docs/gitattributes&quot;&gt;설정 상세참고&lt;/a&gt;)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 와 같이 프로젝트 내부에 git 설정을 저장합니다.&lt;/li&gt;
  &lt;li&gt;별도로 사용할 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'.git/info/attributes'&lt;/code&gt; 에 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern attr1 attr2 ...&lt;/code&gt; 으로 파일 유형별로 설정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 방법 예시&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. core.autocrlf=true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto
&lt;span class=&quot;c&quot;&gt;# 2. core.eol crlf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java &lt;span class=&quot;nv&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;crlf 
&lt;span class=&quot;c&quot;&gt;# 3. core.eol lf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.md &lt;span class=&quot;nv&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lf
&lt;span class=&quot;c&quot;&gt;# 4. 파일타입 지정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java text
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java binary 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>on-Sync</name>
        
        
      </author>

      

      
        <category term="Git" />
      

      
        <summary type="html">설정공유</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Git 설정하기 (1) - 개행 설정하기</title>
      <link href="/git-config-crlf" rel="alternate" type="text/html" title="Git 설정하기 (1) - 개행 설정하기" />
      <published>2022-09-10T00:00:00+00:00</published>
      <updated>2022-09-10T00:00:00+00:00</updated>
      <id>/git-config-crlf</id>
      <content type="html" xml:base="/git-config-crlf">&lt;h1 id=&quot;눈에-보이지-않는-변경사항&quot;&gt;눈에 보이지 않는 변경사항&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Editor 는 보통 문단관련 예약어를 동작으로써 적용합니다. &lt;br /&gt;
실제로 사용한 간격(Whitespace) 예약어가 Space(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\s&lt;/code&gt;) 인지 Tab(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\t&lt;/code&gt;) 인지 바로 확인하기 힘듭니다.&lt;br /&gt;
이 경우엔 개발자가 직접 간격을 이동하면서 확인할 수는 있습니다. &lt;br /&gt;
사실 둘 중 무엇이든 코드동작에 차이점도 없기에 무관합니다. &lt;br /&gt;
하지만 개행(End of Line)과 같이 코드동작에 영향을 준다면 말이 달라집니다.&lt;br /&gt;
개행은 Operation System 에 맞지 않을 경우 File Read 와 Execute 가 실패하게 만들며, &lt;br /&gt;
Editor 화면으로는 CRLF(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;) 인지 LF(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;) 인지 확인할 수 없습니다.&lt;br /&gt;
특히 코드작업을 하다보면 습관적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + S&lt;/code&gt; 로 저장하게 되는데, &lt;br /&gt;
이후 편리상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 과 같은 Recursive 한 옵션으로 무책임하게 Commit 을 추가한다면 &lt;br /&gt;
아무도 모르게 잘못된 개행정보가 Git 에 적용될 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;개행에-대해서&quot;&gt;개행에 대해서&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 문제 해결에 앞서서 개행에 관련된 주변지식을 공유합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;eol&quot;&gt;EOL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End of line&lt;/code&gt; 을 뜻한다.&lt;/li&gt;
  &lt;li&gt;어셈블리 명령 처리부터 코드를 작성하는 텍스트 편집기까지 문자데이터 관리에 사용된다.&lt;/li&gt;
  &lt;li&gt;이들은 CRLF 로 표현된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crlf-란-&quot;&gt;CRLF 란 ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CRLF 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Carriage Return&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line Feed&lt;/code&gt; 를 말한다.&lt;/li&gt;
  &lt;li&gt;이들은 옛 타자기 사용방법에서 유래됐다.&lt;/li&gt;
  &lt;li&gt;기존 타자기는 한 줄을 작성한 뒤, 커서를 앞단으로 이동시킨 후에 아랫줄로 이동했다.&lt;/li&gt;
  &lt;li&gt;Carriage Return 는 커서를 앞단으로 이동시키는 행위 또는 키를 말한다.&lt;/li&gt;
  &lt;li&gt;Line Feed 는 아랫줄로 한칸 이동하는 행위 또는 키를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제별-crlf-가-다른-이유&quot;&gt;운영체제별 CRLF 가 다른 이유&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;CRLF 는 Text 문서의 줄변환(EOL) 예약어로 사용된다.&lt;br /&gt;
이때 CR 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/r&lt;/code&gt; , LF 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/n&lt;/code&gt; 로 표현된다.&lt;br /&gt;
하지만 이들 중 CR 가 줄변환 예약어로 사용되는 것은 운영체제별로 상이하다.&lt;br /&gt;
DOS 계열의 경우 CRLF 을 전부 표시하여 사용한다.&lt;br /&gt;
UNIX 계열의 경우 LF 만을 표시하여 사용한다.&lt;br /&gt;
이러한 이유는 장치의 발전과 관련된다.&lt;br /&gt;
시대적으로 빠른 UNIX 는 저장공간을 줄이기 위해 LF 만을 차용헀고,&lt;br /&gt;
이후 나온 DOS 는 CP/M 의 방식을 따르는데, &lt;br /&gt;
CP/M 은 시리얼라인(직렬통신)으로 터미널을 연결했기에 화면전환이 느렸다.&lt;br /&gt;
때문에 느린 스크롤 속도와 보조를 맞추는 목적으로 CR 을 추가했다.&lt;br /&gt;
즉 이들의 파생인 Linux, Windows 도 각각의 이전 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관례&lt;/code&gt;를 유지하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;설정방법&quot;&gt;설정방법&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음은 개행문제를 회피하기 위한 설정방법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1-coreautocrlf-defaultfalse&quot;&gt;1. core.autocrlf (default=false)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;변환합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;교차플랫폼으로 협업할 경우 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf input
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
      &lt;th&gt;교차플랫폼 협업&lt;/th&gt;
      &lt;th&gt;사용자&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 은 CRLF , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 은 LF&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;Windows 계열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;input&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 만 LF&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;Unix 계열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;Windows 또는 Unix 계열&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;2-coreeol-defaultnative&quot;&gt;2. core.eol (default=native)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;지정합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;단일플랫폼으로 협업할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;강제&lt;/code&gt; 를 목적으로 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol native
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol crlf
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;native&lt;/td&gt;
      &lt;td&gt;사용자 시스템의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;crlf&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crlf&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lf&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lf&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;3-coresafecrlf-defaultnative&quot;&gt;3. core.safecrlf (default=native)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;제어합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crlf -&amp;gt; lf -&amp;gt; crlf&lt;/code&gt; 변환 후의 데이터 차이로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 교차사용을 판단합니다.&lt;/li&gt;
  &lt;li&gt;교차사용 확인시 중단 유무를 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;* false 일 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autocrlf&lt;/code&gt; 의 설정을 수행합니다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf warn
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;중단&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;warn&lt;/td&gt;
      &lt;td&gt;경고 후 진행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content>

      
      
      
      
      

      <author>
          <name>on-Sync</name>
        
        
      </author>

      

      
        <category term="Git" />
      

      
        <summary type="html">눈에 보이지 않는 변경사항</summary>
      

      
      
    </entry>
  
</feed>
