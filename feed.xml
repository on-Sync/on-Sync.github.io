<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-03-05T10:18:42+00:00</updated><id>/feed.xml</id><title type="html">on-Sync</title><subtitle>개발일기</subtitle><entry><title type="html">Computer Science (1) - 컴퓨터 과학은 약속입니다.</title><link href="/computer-science-1" rel="alternate" type="text/html" title="Computer Science (1) - 컴퓨터 과학은 약속입니다." /><published>2023-03-05T00:00:00+00:00</published><updated>2023-03-05T00:00:00+00:00</updated><id>/computer-science-1</id><content type="html" xml:base="/computer-science-1">&lt;h1 id=&quot;컴퓨터-과학의-기초&quot;&gt;컴퓨터 과학의 기초&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴퓨터과학의 시작과 끝은 표현에 대한 약속입니다.
이는 컴퓨터를 이루는 하드웨어인 논리회로가 전기신호를 기반으로 구성되어 있다는 것에서 시작됩니다.
논리회로는 전기신호를 하드웨어가 인식하는 일정 역치에 따라 두 가지 상태로 분류합니다.
이를 전기적으로는 On/Off 인 두 가지의 상태로 분류하게 되는데, 우리는 이를 가장 작은 데이터 단위인 비트라고 부릅니다.
이는 두 가지 상태, 즉 두가지 경우의 수만 인식할 수 있다는 얘기와 같습니다.
컴퓨터과학에서는 이 두가지 상태를 나타내는 저장공간을 데이터의 가장 작은 단위인 Bit 라고 부릅니다.
이 비트를 이용하여 우리가 사는 자연계를 표현하기 위해서 여러 Bit 에 저장된 경우의 수를 데이터의 유형에 따라 해석방식하도록 약속하게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;데이터의-유형&quot;&gt;데이터의 유형&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터의 유형은 크게 논리, 숫자, 문자로 나뉘게 됩니다.
위 세가지 유형의 해석방식을 간단하게 설명하면 다음과 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;boolean-논리적-표현&quot;&gt;Boolean, 논리적 표현&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;논리적 표현은 단일 Bit 에 의해 해석되는 가장 작은 규모의 표현방식입니다.
논리값은 True/False 로 나뉘며, 논리적인 연산을 위해 사용됩니다. 
우리가 사용하는 하드웨어는 사실상 논리적인 연산을 기반으로 여러 유형의 데이터를 다루게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;number-수학적-표현&quot;&gt;Number, 수학적 표현&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음으로 Boolean 의 True/False 는 두 가지의 표현이므로 수학적으로 0 과 1 로 대체될 수 있습니다.
수학에서는 N 개의 표현에 의해 나타는 표기법을 N-진수라고 정의하는데, 컴퓨팅은 0 과 1 이므로 2진수라 표현할 수 있습니다.
즉 컴퓨터과학에서는 숫자를 2진수 기반으로 저장하여 사용하게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;character-언어적-표현&quot;&gt;Character, 언어적 표현&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;마지막으로 자연계의 문자는 나라별 지역별로 다양하기에 0 과 1 이란 두 가지 경우의 수로 표현하기에는 무리가 있습니다.
그렇기에 컴퓨터과학에서는 이를 2진수 기반으로 표현된 수에 대해 매칭하여 문자를 인식하도록 합니다.
우리는 이 숫자를 Code Point 라고 부르게 됩니다.
Code Point 는 실제로 문자가 할당되거나 공백 또는 컴퓨팅 신호로 지정될 수 있습니다.
초기의 컴퓨터과학에서 이러한 문자의 매칭이 나라별로 지역별로 상이했습니다.
하지만 국제적인 표준을 정의하고 가장 많이 쓰는 표현을 분류하여 약속하게 됩니다.
우리는 이러한 언어적 표현의 약속을 문자의 집합(Character Set)이라 정의했고,
이러한 문자의 집합은 같은 Code Point 에 대해 서로 다른 해석결과가 나타날 수 있는 이유가 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇듯 컴퓨터의 데이터는 일련의 약속에 따른 해석방식에 따라 서로 상이한 결과를 갖게 됩니다.
그렇게 우리는 해당 데이터를 어떻게 처리할 지를 하드웨어적인 관점에서 이해할 필요가 있습니다.
다음 포스팅부터는 이 데이터 유형에 대한 하드웨어적인 제약사항과 이를 해결하기 위한 컴퓨터과학관점의 이야기를 이어나가겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>on-Sync</name></author><category term="Computer" /><summary type="html">컴퓨터 과학의 기초</summary></entry><entry><title type="html">Computer Science (1) - Syntactic Sugar</title><link href="/computer-science-syntactic-sugar" rel="alternate" type="text/html" title="Computer Science (1) - Syntactic Sugar" /><published>2022-11-21T00:00:00+00:00</published><updated>2022-11-21T00:00:00+00:00</updated><id>/computer-science-syntactic-sugar</id><content type="html" xml:base="/computer-science-syntactic-sugar">&lt;h1 id=&quot;syntactic-sugar&quot;&gt;Syntactic Sugar&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;편하게 읽고 쓰기&lt;/strong&gt; 위해서 변형된 표현 방식&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문법을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단순화&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;직관화&lt;/code&gt;하므로 사용자의 작업속도를 향상시킨다.
단, 단순화의 과정에서 암묵적인(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implicit&lt;/code&gt;) 규칙이 존재할 수 있고,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implicit&lt;/code&gt; 의 위반은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RuntimeException&lt;/code&gt; 의 원인이 되기에 사용에 주의해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;loop-syntactic-sugar&quot;&gt;Loop Syntactic Sugar&lt;/h2&gt;

&lt;h3 id=&quot;for-each-와-iterator&quot;&gt;For-each 와 Iterator&lt;/h3&gt;

&lt;h2 id=&quot;initializer-syntactic-sugar&quot;&gt;Initializer Syntactic Sugar&lt;/h2&gt;

&lt;h3 id=&quot;bracket-initializer&quot;&gt;Bracket Initializer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;actions after constructor&lt;/li&gt;
  &lt;li&gt;implement Anonymous Class&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;api-interface-syntactic-sugar&quot;&gt;API Interface Syntactic Sugar&lt;/h2&gt;

&lt;h3 id=&quot;fluent-interface&quot;&gt;Fluent Interface&lt;/h3&gt;

&lt;h3 id=&quot;lambda-expressions&quot;&gt;Lambda Expressions&lt;/h3&gt;

&lt;h3 id=&quot;string-append&quot;&gt;String Append&lt;/h3&gt;

&lt;h2 id=&quot;operator-syntactic-sugar&quot;&gt;Operator Syntactic Sugar&lt;/h2&gt;

&lt;h3 id=&quot;ternary-operator&quot;&gt;Ternary Operator&lt;/h3&gt;

&lt;h3 id=&quot;auto-boxing&quot;&gt;Auto Boxing&lt;/h3&gt;

&lt;h3 id=&quot;type-casting&quot;&gt;Type Casting&lt;/h3&gt;

&lt;h3 id=&quot;augmented-assignment&quot;&gt;Augmented Assignment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;i.e, Compound Assignment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;https://serantechexplore.wixsite.com/website/post/syntactic-sugars-in-java&lt;/p&gt;

&lt;p&gt;https://www.quora.com/What-syntactic-sugars-are-there-in-Java&lt;/p&gt;

&lt;p&gt;https://stackoverflow.com/questions/3866764/java-syntactic-sugar&lt;/p&gt;

&lt;p&gt;https://jwdeveloper.tistory.com/148&lt;/p&gt;

&lt;p&gt;https://carrotweb.tistory.com/96&lt;/p&gt;

&lt;p&gt;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=msyang59&amp;amp;logNo=220594944655&lt;/p&gt;</content><author><name>on-Sync</name></author><category term="Computer Science" /><category term="Java" /><summary type="html">Syntactic Sugar</summary></entry><entry><title type="html">Design Pattern (1) - Singleton</title><link href="/design-pattern-singleton" rel="alternate" type="text/html" title="Design Pattern (1) - Singleton" /><published>2022-11-16T00:00:00+00:00</published><updated>2022-11-16T00:00:00+00:00</updated><id>/design-pattern-singleton</id><content type="html" xml:base="/design-pattern-singleton">&lt;h1 id=&quot;singleton&quot;&gt;Singleton&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;한정된 자원을 아끼는&lt;/em&gt;&lt;/strong&gt; 생성 패턴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;단어의-뜻&quot;&gt;단어의 뜻&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Single&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ton&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;= (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단독&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인 것&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;= &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단일 개체&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;(e.g. Singleton set : 단일 개체 집합)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;집합의-기준&quot;&gt;집합의 기준&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 은 집합의 기준에 따라 단일성을 보장하면 되는 개념이다.
하지만 일반적으로 단일 소프트웨어에서 유일성을 보장하는 것을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 이라 부른다.
즉, 더 작은 단위에서도 사용될 수 있으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 의 집합수준을 확인할 필요가 있다.&lt;/p&gt;

&lt;h3 id=&quot;class-diagram&quot;&gt;Class Diagram&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스(Application) 수준에서의 사용방식&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;범용적인-설계구조&quot;&gt;범용적인 설계구조&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;static (non final)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/png/SoWkIImgAStDuU9ApaaiBbO8pinBpqajoSzJgEPI089ge8AIpEHQ1TtCF20pBpdL2g46h48NpjNGHDMYdPvQuWdL1PIhvU9oICrB0Le60000&quot; alt=&quot;범용적인 설계구조&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;jvm-기반에서의-효율성-강화&quot;&gt;JVM 기반에서의 효율성 강화&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class Loader 의 Load 시점을 고려한 설계&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://www.plantuml.com/plantuml/png/SoWkIImgAStDuU9ApaaiBbO8pinBpqajoSzJgEPI009Tk8269bYW6gYZ93EvLa4xFRN4Cm_8oqjE1ShLOfYWvvDOLUcHdvEIMgHGZQfNDnEgqGgX76G2mdPjNLsi9d5nEQJcfG0T3000&quot; alt=&quot;JVM 기반에서의 효율성 강화&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;class-loader-의-load-방식&quot;&gt;Class Loader 의 Load 방식&lt;/h2&gt;

&lt;p&gt;로드시점은 다음 두가지로 구분된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Load-Time Dynamic Loading&lt;/li&gt;
  &lt;li&gt;Runtime Dynamic Loading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전자는 JVM 이 ByteCode 의 main() 부터 순차적으로 코드를 검사하면서, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;참조&lt;/code&gt; 하는 &lt;strong&gt;클래스들을&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method Area&lt;/code&gt; 에 적재하는 방식이다.
후자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reflection&lt;/code&gt; 처럼 실행 중에 대상이 지정될 때, 해당 클래스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method Area&lt;/code&gt; 에 적재하는 방식이다.
전자도 Dynamic 이라 불리는 이유는 클래스의 사용이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;명시적 참조&lt;/code&gt;가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;암시적 참조&lt;/code&gt; 는 제외되기 때문이다.
실제로 같은 main() 를 소유하는 클래스 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inner 클래스&lt;/code&gt; 가 하나 더 존재해도 이를 실제로 참조하고 있지 않다면,
메모리에 적재하지 않는다. 이러한 이유를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;External Class Loader&lt;/code&gt; 를 생각하면 우리가 외부에서 가져온 코드들을 실제로 다 사용하지 않기에
필요한 것만 사용하겠다는 JVM 구현을 위한 요구사항에 기반한다.&lt;/p&gt;

&lt;p&gt;그렇게 적재되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;명시적 참조&lt;/code&gt; 된 클래스 정보도, 전부 적재되지는 않는다.
내부 구조에서 변동성이 있는 정보(클래스 상태/형태)만을 적재하고,
변동성이 없는 다음 항목들은 제외된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Constant : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 이 동시에 명시될 경우, JVM 상의 불변대상이므로 Class 구조와 무관하게 처리된다.&lt;/li&gt;
  &lt;li&gt;Literal : Operand 인 문자 또는 숫자값, 이때 숫자값은 메모리 설정시 효율이 떨어지는 큰 수에 해당된다. (e.g, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int num = 1111111111111;&lt;/code&gt; 인 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1111111..&lt;/code&gt; 의 할당비효율성으로 Literal 로 취급된다.)&lt;/li&gt;
  &lt;li&gt;Static Nested(Inner) Class : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt; 이 지정된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inner Class&lt;/code&gt; 는 클래스구조가 불변(Final)인 점을 고려하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Outer Class&lt;/code&gt; 에 종속되지 않는다 판단하여 별도로 처리된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이후 나올 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Holder&lt;/code&gt; Idiom 은 마지막 제외기준을 활용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;idiom&quot;&gt;Idiom&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;보편화된 구현틀을 말하며, 관용구라 부른다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;eager-initialization&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eager Initialization&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-final&lt;/code&gt; 이기에 Class Load 시에 적재(할당,연결,초기화)된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;Class Loader(JVM)의 구조적인 단일보장에 책임을 전가하므로 안정성이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;실재로 instance 변수에 유무와 관계없이 클래스의 사용만으로 초기화되므로 메모리 낭비(Memory Leak)가 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-initialization&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy Initialization&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;getInstance() 를 호출할 때, 메모리에 할당한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;메모리 낭비를 방지할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread-safe&lt;/code&gt; 하지 않으므로 중복된 초기화를 진행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-initialization--synchronizedthread-safe&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy Initialization&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronized(Thread-safe)&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 를 추가하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread-safe&lt;/code&gt; 를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;중복 초기화가 발생하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt; 기준의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lock&lt;/code&gt; 이 적용되므로, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queue&lt;/code&gt; 방식의 구조적인 속도 정체(비용)가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-initialization--synchronizedthread-safe--double-checked-locking&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy Initialization&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronized(Thread-safe)&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double-Checked Locking&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronized bracket&lt;/code&gt; 을 사용하여 사전 체크를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread-safe&lt;/code&gt; 를 제공함과 동시에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lock&lt;/code&gt; 을 최소화한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;JVM 요구사항에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메모리 할당&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;연결&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기화&lt;/code&gt; 순서로 객체를 생성하게 되는데, null 의 유무는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메모리 할당&lt;/code&gt; 에 따라 판별된다.&lt;/li&gt;
      &lt;li&gt;즉, A 가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기화&lt;/code&gt;를 완료하기 전인 찰나의 순간에 B 가 접근할 경우 재 초기화를 시도하는 &lt;strong&gt;하드웨어적인 결함&lt;/strong&gt; 이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-initialization--synchronizedthread-safe--double-checked-locking--without-cpu-cache&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy Initialization&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Synchronized(Thread-safe)&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double-Checked Locking&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Without CPU Cache&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 을 지정하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread&lt;/code&gt; 들이 데이터를 메모리에서 접근하여 동기화 문제를 줄인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cache&lt;/code&gt; 를 위한 처리시간이 사라지므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread-safe&lt;/code&gt; 를 위한 찰나의 비동기화 시간을 줄인다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 가 메모리를 직접접근하므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Multi-Write&lt;/code&gt; 에 안정성을 보장하지 않는다.
        &lt;ul&gt;
          &lt;li&gt;찰나의 순간에 들어온 처리가 있다면 후순위 대상의 처리로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Overwrite&lt;/code&gt; 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Non-Cache&lt;/code&gt; 이므로 매번 읽는 시간(비용)에 더 소요된다.&lt;/li&gt;
      &lt;li&gt;또한, 이러한 구조를 위해서 제공되는 키워드가 아니기에 기능의 탄생배경과 맞지 않아 위험성이 크다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lazy-initialization--nested-static-class-holder&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy Initialization&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nested Static Class Holder&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class Loader(JVM) 의 처리방식에 안정성을 위임한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;소스코드가 아닌 JVM 의 요구사항에 맞게 보장되므로, 가장 안정성이 높은 방식이다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;가장 최신의 방법으로 권장되고 있다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;JVM 구현체에 따라 예기치 못한 문제가 발생할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;하지만 이는 개인의 코드가 아닌 전체적인 개발자 생태계에 의해 검증되기에 개인이 걱정할 문제는 아니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Holder&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;java-api-의-singleton&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAVA API&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAVA API&lt;/code&gt; 에서의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 는 주로 단일 소프트웨어가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&lt;/code&gt; 기준의 유일성을 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;호출방법&quot;&gt;호출방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List.of(E e)&lt;/code&gt; : Java 9 부터 지원, 정확히는 Immutable 기반 Collection 을 활용한 Overload Method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collections.singletonList(E e)&lt;/code&gt; : Collection 수준의 Singleton 를 목표로 제공된 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;구현구조&quot;&gt;구현구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Collection 수준에서 구현하는 방법은 크게 1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 제한, 2)&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception&lt;/code&gt; 처리 두 가지로 나뉜다.&lt;/li&gt;
  &lt;li&gt;구현체에 따라 중복되서 사용되는 경우도 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SingletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;replaceAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UnaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;spring-의-singleton&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 은 DI 를 위한 IoC 에서 활용된다.
IoC 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POJO&lt;/code&gt; 를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bean&lt;/code&gt; 이라는 단위로 저장하여 사용하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bean&lt;/code&gt;의 기본 관리 수준은 소프트웨서 상의 단일 개체이며 이를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SingletonScope&lt;/code&gt; 라고 부른다.
물론 다른 수준의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 을 제공하는데, 크게 두가지로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurableBeanFactory&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt; 로 나뉜다.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigurableBeanFactory&lt;/code&gt; 는 기본적인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring Framework&lt;/code&gt; 의 IoC 이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring MVC&lt;/code&gt; 기반의 IoC 이다.
기본형은 다시 Default 인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SingletonScope&lt;/code&gt; 과 항시 재생성되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrototypeScope&lt;/code&gt; 으로 나뉘며 주로 Status 기반의 Object 에 활용된다.
MVC 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; 기준의 요청으로 수준을 나누는데 WAS(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Servlet&lt;/code&gt;) 수준인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationScope&lt;/code&gt;, 연결 수준인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SessionScope&lt;/code&gt;, 요청 수준인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReqeustScope&lt;/code&gt; 로 나뉜다.
즉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spring&lt;/code&gt; 내에서도 여러 수준을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 이 프레임워크에 의해 관리되고 있다.&lt;/p&gt;

&lt;h3 id=&quot;scope-지정방법&quot;&gt;Scope 지정방법&lt;/h3&gt;

&lt;h4 id=&quot;singletonscope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SingletonScope&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.ConfigurableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SingletonBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleton1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleton2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigurableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_SINGLETON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singleton3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prototypescope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrototypeScope&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.ConfigurableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prototype1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prototype2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigurableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_PROTOTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prototype3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;requestscope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RequestScope&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.annotation.RequestScope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestScope&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sessionscope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SessionScope&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.annotation.SessionScope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;session&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_SESSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@SessionScope&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;applicationscope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationScope&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.annotation.ApplicationScope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_APPLICATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ApplicationScope&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;패턴의-조합&quot;&gt;패턴의 조합&lt;/h2&gt;

&lt;h3 id=&quot;delegator-패턴에서-사용될-수-있는-singelton-idiom&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delegator&lt;/code&gt; 패턴에서 사용될 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singelton&lt;/code&gt; Idiom&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;아래 예시는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eager Initialization&lt;/code&gt; 으로 Delegator 패턴을 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;delegators&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;algorithm1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegator1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;algorithm2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegator2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;algorithm3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegator3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Delegator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;주의사항&quot;&gt;주의사항&lt;/h2&gt;

&lt;p&gt;class 는 Method Area 를 사용한다. 소프트웨어 수준의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sinlgeton&lt;/code&gt; 는 class 기준의 load 를 활용하므로
많이 사용할 수록 JVM 의 메모리관리에서 해당 영억의 확보를 고려해야한다.&lt;/p&gt;

&lt;h2 id=&quot;그-외&quot;&gt;그 외&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Singleton&lt;/code&gt; 의 구현방식 중 하니인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Immutable&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external class&lt;/code&gt; 를 활용할 경우에 Parameter 의 &lt;strong&gt;불변성을 확보&lt;/strong&gt; 할 수 있다.
개인이 집적코드를 작성하여 &lt;strong&gt;method 에서 parameter 를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 로 지정&lt;/strong&gt; 할 수도 있지만, 그 외의 &lt;strong&gt;사용자 관점에서 오류를 예방하거나 Mocking 에서 많이 사용된다.&lt;/strong&gt;&lt;/p&gt;</content><author><name>on-Sync</name></author><category term="Design Pattern" /><category term="Java" /><summary type="html">Singleton</summary></entry><entry><title type="html">Software Engineering (1) - 전체 구조 요약</title><link href="/software-engineering" rel="alternate" type="text/html" title="Software Engineering (1) - 전체 구조 요약" /><published>2022-11-13T00:00:00+00:00</published><updated>2022-11-13T00:00:00+00:00</updated><id>/software-engineering</id><content type="html" xml:base="/software-engineering">&lt;h1 id=&quot;software-engineering&quot;&gt;Software Engineering&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Software Engineering 에서 소프트웨서 개발은 다음과 같은 포함관계로 구체화된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Software Development Process (절차)
    &lt;ul&gt;
      &lt;li&gt;Software Development Methodology (방법론)
        &lt;ul&gt;
          &lt;li&gt;Programming Paradigm (패러다임)
            &lt;ul&gt;
              &lt;li&gt;Software Design Pattern (패턴)
                &lt;ul&gt;
                  &lt;li&gt;Programming Idiom (관용구)
                    &lt;ul&gt;
                      &lt;li&gt;Programming Implementation (구현체) (i.g Concrete Algorithm)&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;software-development-process-절차&quot;&gt;Software Development Process (절차)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;SDLC 을 조합하는 10가지 개발절차 모델&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;소프트웨어 개발 프로세스 모델의 이해&lt;/li&gt;
  &lt;li&gt;주머구구식 모델&lt;/li&gt;
  &lt;li&gt;선형 순차적 모델&lt;/li&gt;
  &lt;li&gt;V모델 (Test by Step)&lt;/li&gt;
  &lt;li&gt;진화적 프로세스 모델 (N-Prototype)&lt;/li&gt;
  &lt;li&gt;나선형 모델&lt;/li&gt;
  &lt;li&gt;단계적 개발 모델 (Release)&lt;/li&gt;
  &lt;li&gt;통합 프로세스 모델 (Progressive)&lt;/li&gt;
  &lt;li&gt;애자일 프로세스 모델 (On needs basis, like YAGNI)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;software-development-life-cycle-개발-생명-주기-sdlc&quot;&gt;Software Development Life Cycle (개발 생명 주기, SDLC)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;요구사항 정의 (R, Requirement)&lt;/li&gt;
  &lt;li&gt;요구사항 분석 (A, Analysis)&lt;/li&gt;
  &lt;li&gt;설계 (D, Design)&lt;/li&gt;
  &lt;li&gt;구현 (C, Coding)&lt;/li&gt;
  &lt;li&gt;테스트 (T, Test)&lt;/li&gt;
  &lt;li&gt;유지보수 (M, Maintenance)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;software-development-methodology-방법론&quot;&gt;Software Development Methodology (방법론)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개발절차 모델의 구체화된 방법
    &lt;ul&gt;
      &lt;li&gt;(e.g, Agile`s Extreme Programming = XP)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;방법론의-구체화-대상&quot;&gt;방법론의 구체화 대상&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;작업절차&lt;/li&gt;
  &lt;li&gt;작업방법&lt;/li&gt;
  &lt;li&gt;산출물&lt;/li&gt;
  &lt;li&gt;관리&lt;/li&gt;
  &lt;li&gt;기법&lt;/li&gt;
  &lt;li&gt;도구&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;programming-paradigm-패러다임&quot;&gt;Programming Paradigm (패러다임)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개발언어 탄생(설계)의 기반이자 특징이 될 수 있다.
    &lt;ul&gt;
      &lt;li&gt;(e.g, Procedural = C, Object-oriented = Java )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;방법론을 실현하기 위한 지향점 또는 이념.
    &lt;ul&gt;
      &lt;li&gt;(e.g, OOP, DDD, TDD, CBD …)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;software-design-pattern-패턴&quot;&gt;Software Design Pattern (패턴)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;패러다임 내에서 소프트웨어의 설계를 위한 반복적인 유형을 말한다.&lt;/li&gt;
  &lt;li&gt;유지보수를 위해 재사용성에 중점을 둔다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;정답(구현)이 아닌 방향성(해결책)의 제시이며&lt;/strong&gt;, 책 또는 논문으로 공유되고 전파되어졌다.&lt;/li&gt;
  &lt;li&gt;크게 다음과 같이 분류할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;GoF`s Patterns
        &lt;ul&gt;
          &lt;li&gt;디자인 패턴 중 가장 유명한 제안으로 Design Patterns 란 이름의 서적으로 집필되었다.&lt;/li&gt;
          &lt;li&gt;크게 생성(Assignment), 구조(Composition), 행동(Execution) 관점으로 분류된다.
            &lt;ul&gt;
              &lt;li&gt;비슷한 서적인 Code Complete 에서 제시된 디자인 패턴과 다소 중첩된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Concurrency Patterns
        &lt;ul&gt;
          &lt;li&gt;자원을 공유하는 방법을 제안한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Architectural Patterns
        &lt;ul&gt;
          &lt;li&gt;다수의 소프트웨어를 연결/구조화 하는 방법을 제안한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;그외 패턴들
        &lt;ul&gt;
          &lt;li&gt;문헌이 아닌 코드/프레임워크로 전파되어 사용되는 패턴&lt;/li&gt;
          &lt;li&gt;(e.g, Dependency Injection, Lazy Loading, Delegation …)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;idiom-관용구&quot;&gt;Idiom (관용구)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Idiom 은 제시된 패턴(방향성)을 구현한 것 중 정형화된 작성 방법을 말한다.&lt;/li&gt;
  &lt;li&gt;동일한 패러다임을 지원하는 언어는 같은 패턴을 구사할 수 있지만, 같은 관용구는 언어의 전체적인 특성에 따라 다르게 표현될 수 있다.&lt;/li&gt;
  &lt;li&gt;관용구는 구현체 중 보편화된 작성 방법들이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation-구현체&quot;&gt;Implementation (구현체)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;i.e, Concrete Algorithm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;논리 또는 구조에 대해 구체적으로 작성된 내용을 말한다.&lt;/li&gt;
  &lt;li&gt;주어진 전략이나 모델뿐만 아니라 사용자(개발자)에 따라 작성된 내용이 상이할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;em&gt;작성자의 개인적인 생각으론, 구현방법 또는 구현체가 상위 집합에서 제시된 개념에 벗어날 수록 유지보수 비용이 증가한다고 판단하고 있다.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>on-Sync</name></author><category term="Software Engineering" /><summary type="html">Software Engineering</summary></entry><entry><title type="html">Git 설정하기 (2) - 설정 공유하기</title><link href="/git-config-share" rel="alternate" type="text/html" title="Git 설정하기 (2) - 설정 공유하기" /><published>2022-09-11T00:00:00+00:00</published><updated>2022-09-11T00:00:00+00:00</updated><id>/git-config-share</id><content type="html" xml:base="/git-config-share">&lt;h1 id=&quot;설정공유&quot;&gt;설정공유&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이전 글에서 설정들은 개발자 개인환경에서 적용해야하는 설정입니다.&lt;br /&gt;
개인별로 적용하다보면 실수가 있기 마련입니다.&lt;br /&gt;
이를 방지하는 방법으로 다음 방법이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitconfig&quot;&gt;.gitconfig&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;설정정보를 공유하기 위해서는 저장소에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; 로 등록합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local include.path .gitconfig&lt;/code&gt; 명령을 수행하여 같은 환경을 적용할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;(가능하면 프로그램의 PreRun 에서 git config 를 자동 수행하도록 구성하는 것도 좋습니다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;글로벌 설정은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; 파일의 내용으로 공유할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;프로젝트별로 다른 설정이 필요할 수도 있기에 상황에 따라 사용합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만 이 방법은 자동적용이 안되므로 다음 방법을 활용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitattributes-설정-상세참고&quot;&gt;.gitattributes (&lt;a href=&quot;https://git-scm.com/docs/gitattributes&quot;&gt;설정 상세참고&lt;/a&gt;)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 와 같이 프로젝트 내부에 git 설정을 저장합니다.&lt;/li&gt;
  &lt;li&gt;별도로 사용할 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'.git/info/attributes'&lt;/code&gt; 에 지정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern attr1 attr2 ...&lt;/code&gt; 으로 파일 유형별로 설정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 방법 예시&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1. core.autocrlf=true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java &lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto
&lt;span class=&quot;c&quot;&gt;# 2. core.eol crlf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java &lt;span class=&quot;nv&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;crlf 
&lt;span class=&quot;c&quot;&gt;# 3. core.eol lf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.md &lt;span class=&quot;nv&quot;&gt;eol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lf
&lt;span class=&quot;c&quot;&gt;# 4. 파일타입 지정&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java text
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.java binary 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>on-Sync</name></author><category term="Git" /><summary type="html">설정공유</summary></entry><entry><title type="html">IntelliJ Plug-In 소개 (1) - GitToolBox</title><link href="/intellij-plugin-gittoolbox" rel="alternate" type="text/html" title="IntelliJ Plug-In 소개 (1) - GitToolBox" /><published>2022-09-11T00:00:00+00:00</published><updated>2022-09-11T00:00:00+00:00</updated><id>/intellij-plugin-gittoolbox</id><content type="html" xml:base="/intellij-plugin-gittoolbox">&lt;h1 id=&quot;협업을-위한-플러그인&quot;&gt;협업을 위한 플러그인&lt;/h1&gt;

&lt;p&gt;여러사람이 함께 일하는 프로젝트는 변화가 빈번합니다. &lt;br /&gt;
그 만큼 Tracking 에 신경써야하는 노고와 시간이 필요하고요. &lt;br /&gt;
물론 일하다 보면 놓치는 경우도 많기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitToolBox&lt;/code&gt; 라는 플러그인을 소개 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;gittoolbox-의-기능&quot;&gt;GitToolBox 의 기능&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능은 플러그인의 공식 설명에 대한 요약과 그 예시를 말씀드리겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-git-status&quot;&gt;1. Git status:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;number of ahead / behind commits for current branch as status bar widget
ahead / behind, current branch, tags on HEAD as Project View decoration on modules
status bar widget with detailed information and additional actions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git status 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; 의 내용을 다음과 같이 요약하여 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-status.png&quot; alt=&quot;git-status.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 Window 에서 Working Directory 의 정보를 직관적으로 확인할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;현재 브랜치 이름 (Current Head)&lt;/li&gt;
      &lt;li&gt;변경된 파일 수 (Changes File Count)&lt;/li&gt;
      &lt;li&gt;Remote 와 Local 의 차이 (Revision Diff)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 예시를 설명해 보겠습니다. &lt;br /&gt;
현재 Working Directory 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치를 Check out 한 상태입니다. &lt;br /&gt;
Remote 와 비교해서 Local 의 Revision 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;개 Commit 로 앞선 상태이기도 합니다. &lt;br /&gt;
마지막으로 현재 작업(변경) 중인 파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;개가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-git-blame&quot;&gt;2. Git blame:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;inline blame - show blame for line at caret in active editor
blame details balloon for line at caret
status bar widget with detailed information and additional actions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git Blame 기능은 IntelliJ 에서 기본으로 제공하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-blame-origin.png&quot; alt=&quot;git-blame-origin.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단, 위 예시와 같이 현재 라인의 변경사유를 확인하려면 개별 Window 를 열어야 하는 번거로움이 있습니다.
이러한 불편함을 줄이기 위해 동적인 balloon 을 다음과 같이 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-blame-gittoolbox.png&quot; alt=&quot;git-blame-gittoolbox.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;작업자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Git Blame&lt;/code&gt; 으로 Editor 의 공간낭비를 하지 않아도 되고, 직관적으로 마지막 변경사유를 확인할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-auto-fetch&quot;&gt;3. Auto fetch:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;runs git fetch at fixed intervals
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch 자동화&lt;/code&gt;는 제가 GitToolBox 를 쓰는 가장 큰 이유입니다.
Git 은 Remote 의 최신 변경사항을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 를 통해 확인합니다.
&lt;strong&gt;Local 에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 를 수행하지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; 필요 여부를 모르게 됩니다.&lt;/strong&gt;
이때 사용자가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pull Request&lt;/code&gt; 를 진행하면 예기치 못한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conflict&lt;/code&gt; 를 맞이하게 됩니다.
그렇게 되면 사용자는 본인의 브랜치에서 커밋을 재 정비해야하고,
Remote 에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Force 권한&lt;/code&gt; 이 없다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Owner&lt;/code&gt; 에게 번거로운 요청을 하게 될 것입니다.
여러 작업자가 동시에 프로젝트를 진행한다면 이런 경우는 더욱 빈번할 수도 있고요.
그렇기에 협업에서 Git Remote 에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch &amp;amp; update&lt;/code&gt; 는 중요하고,
이를 판단하기 위해 사용자는 항상 Remote 의 변경유무를 인지해야합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-push-tags-on-current-branch&quot;&gt;4. Push tags on current branch:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;available in VCS / Git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;IntelliJ 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git &amp;gt; Push&lt;/code&gt; 에서도 지원하는 기능입니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-behind-tracker&quot;&gt;5. Behind tracker&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shows notification when behind count of current branch changes and is non-zero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능 1번에서 설명한 파일 변경 수에 대한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;6-branch-name-completion-in-commit-dialog&quot;&gt;6. Branch name completion in Commit dialog:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provides branch name completion inside Commit dialog message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;snippet 과 같이 dropbox 를 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-message-auto-complete.png&quot; alt=&quot;git-message-auto-complete.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-gitmoji-completion-in-commit-dialog&quot;&gt;7. Gitmoji completion in Commit dialog:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provides gitmoji completion inside Commit dialog message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능 6번과 동일한 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;8-recent-branches-switcher&quot;&gt;8. Recent branches switcher&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch between recently used branches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alt + ` &amp;gt; 7&lt;/code&gt; 을 단순화 시킨 기능입니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;9-outdated-branches-cleanup&quot;&gt;9. Outdated branches cleanup&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find and remove merged and stale branches
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오래된 브랜치를 삭제합니다. &lt;br /&gt;
Merge 되지 않은 브랜치는 문답을 확인을 요청합니다.
자동화를 위해 시간단위 주기를 설정할 수 있습니다.
저는 위험하다고 생각해서 사용하지 않습니다. (추천 X)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;10-git-extender-integration&quot;&gt;10. Git Extender integration&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;can be selected as update action executed from behind tracker popup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;1번 기능이 우측하단에 표시되며, 클릭시 확장통합을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh Status&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fetch&lt;/code&gt; 등의 기능을 제공합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-extender.png&quot; alt=&quot;git-extender.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Update&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Merge&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rebase&lt;/code&gt; 를 선택할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-09-12-intellij-plugin-gittoolbox/git-update-action.png&quot; alt=&quot;git-update-action.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 기능은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pannel&lt;/code&gt; 이 아닌 우측하단의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popup&lt;/code&gt; 기능을 활용할 수 있다는 것이 특징입니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>on-Sync</name></author><category term="IntelliJ" /><category term="Plug-In" /><category term="Git" /><summary type="html">협업을 위한 플러그인</summary></entry><entry><title type="html">JVM 이해하기 (1) - 기본 동작 방식</title><link href="/java-jvm" rel="alternate" type="text/html" title="JVM 이해하기 (1) - 기본 동작 방식" /><published>2022-09-11T00:00:00+00:00</published><updated>2022-09-11T00:00:00+00:00</updated><id>/java-jvm</id><content type="html" xml:base="/java-jvm">&lt;h1 id=&quot;jvm-이란-&quot;&gt;JVM 이란 ?&lt;/h1&gt;

&lt;p&gt;JVM 은 Java 의 특징(언어적 개성)을 실현하기 위한 시스템상의 기본 스펙입니다.
JVM 의 구현체는 배포 벤더에 따라 다양합니다.
가장 대표적인 것은 Oracle 의 OpenSource JDK 의 HotSpot 을 말하곤 합니다.
즉, JVM 의 세부구현방식에 따라 차이는 존재할 수 있으나 
기본적인 시스템상의 스펙에 따른 특징은 동일합니다.&lt;/p&gt;

&lt;h2 id=&quot;java-의-특징&quot;&gt;Java 의 특징&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;객체 지향 언어&lt;/li&gt;
  &lt;li&gt;인터프리터 언어&lt;/li&gt;
  &lt;li&gt;독립적인 플랫폼&lt;/li&gt;
  &lt;li&gt;자동 메모리 관리&lt;/li&gt;
  &lt;li&gt;멀티 쓰레딩 지원&lt;/li&gt;
  &lt;li&gt;필요에 따른 동적 로딩&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;등등 관점에 따라 더 추가될 수 있지만 기본적으로 위 6 가지 특징으로
이후 설명되는 JVM 구성이 어떤 기능을 위해 설계 되었는지 이해할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;jvm-의-실행-순서&quot;&gt;JVM 의 실행 순서&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;준비 단계
    &lt;ul&gt;
      &lt;li&gt;Compiler&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초기화 단계
    &lt;ul&gt;
      &lt;li&gt;Class Loader&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 단계
    &lt;ul&gt;
      &lt;li&gt;Execution Engine&lt;/li&gt;
      &lt;li&gt;Garbage Collector&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;준비단계---compiler&quot;&gt;준비단계 - Compiler&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인터프리터 언어&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;독립적인 플랫폼&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 소스코드는 JVM 을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 로 컴파일하고, JVM 은 OS 별로 구현체를 달리하여 설치하여
OS 의존성이 아닌 JVM 의존성으로 설치에 따라 극복할 수 있는 구조로 의존성을 약화시킬 수 있습니다.
이때 자바 컴파일러는 CLI 상의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javac&lt;/code&gt; 를 말하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일로 생성됩니다.
일반적으로는 여러 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.class&lt;/code&gt; 를 묶어서 사용하기 위해서 한 단계를 추가하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jar&lt;/code&gt; 형식의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 로 저장, 실행합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-compile.png&quot; alt=&quot;jvm-compile.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;초기화-단계---class-loader&quot;&gt;초기화 단계 - Class Loader&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적 클래스 로딩&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;파일형태인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 에 의해 필요에 따라 메모리에 적재(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;동적 클래스 로딩&lt;/code&gt;)되어 사용됩니다.
여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 는 크게 적재(Loading), 연결(Linking), 초기화(Initiation) 의 세가지 단계에 걸쳐
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime Data Area&lt;/code&gt; 중 프로세스 전역에 걸쳐 사용되는 데이터를 관리하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method Area&lt;/code&gt; 에 저장하게 됩니다.&lt;/p&gt;

&lt;p&gt;적재는 파일로 저장된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 를 분류를 통해 메모리 상에 보관하는 행동을 말합니다.
JVM 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class Loader&lt;/code&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Class Loading&lt;/code&gt; 방식으로 적재를 수행합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Class Loading&lt;/code&gt; 의 종류는 두 가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스의 시작점인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; 부터 흐름에 따라 명시된 클래스 동적으로 불러오는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Load-time Dynamic Loading&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class.forName(&quot;className&quot;)&lt;/code&gt; 과 같이 매개변수로 클래스를 불러오는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run-time Dynamic Loading&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;적재되는 정보는 다음과 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reflection&lt;/code&gt; 정보인 것을 확인 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Class 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Meta&lt;/code&gt; 정보인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implements&lt;/code&gt; 와 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inheritance&lt;/code&gt; 정보&lt;/li&gt;
  &lt;li&gt;현재 대상의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum&lt;/code&gt; 과 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type&lt;/code&gt; 정보&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constructor&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Field&lt;/code&gt; 와 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt; 속성의 내부정보&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;클래스 로더의 구조는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-class-loaders.png&quot; alt=&quot;jvm-class-loaders.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스 로더는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delegator&lt;/code&gt; 방식으로 최상의 Bootstrap 부터 User-Defined 까지 순차적으로 각 범위에서 클래스 정보를 탐색합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Bootstrap Class Loader 는 Object 와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang&lt;/code&gt; 의 기본 정보를 로드하여 기본 클래스 정보를 로드합니다.&lt;/li&gt;
  &lt;li&gt;Extension Class Loader 는 외부 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dependencies&lt;/code&gt; 들을 로드합니다.&lt;/li&gt;
  &lt;li&gt;Application Class Loader 는 사용자가 작성한 클래스 정보를 로드합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클래스 로더의 3가지 원칙&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Delegation : 하위는 상위에 책임을 위임하여 검색한 후 자신의 범위에서 검색을 수행하며 자신의 하위에게 결과를 반환합니다.&lt;/li&gt;
  &lt;li&gt;Visibility : 하위는 상위결과를 얻을 수 있지만, 상위는 위임결과만을 반환합니다.&lt;/li&gt;
  &lt;li&gt;Uniqueness : 하위는 적재 과정 중 상위결과를 제외하므로 유일성을 보장합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체 적재 절차는 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/post_content/2022-10-30-java-jvm-1/jvm-class-loaders-process.png&quot; alt=&quot;jvm-class-loaders-process.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Class Loader 가 class-path 에서 클래스를 찾지 못할 경우&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Exception 처리 및 RuntimeError 가 발생하게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Class Loader 가 class-path 에서 클래스를 찾을 경우&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;적재 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 의 정상유무를 검증(Verify)합니다.&lt;/li&gt;
      &lt;li&gt;검증 후에는 메모리 공간을 확보하고 유형에 따른 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;기본값&lt;/code&gt;을 설정하여 사전준비(Prepare)를 합니다.&lt;/li&gt;
      &lt;li&gt;준비 후에는 클래스 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbolic References&lt;/code&gt; 를 위한 주소값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime Constant Pool&lt;/code&gt; 에 설정하여 참조값을 풀이(Resolve)합니다.&lt;/li&gt;
      &lt;li&gt;참조값 설정 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteCode&lt;/code&gt; 에 명시된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;초기값&lt;/code&gt;에 따라 데이터를 셋팅합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>on-Sync</name></author><category term="Git" /><summary type="html">JVM 이란 ?</summary></entry><entry><title type="html">Git 설정하기 (1) - 개행 설정하기</title><link href="/git-config-crlf" rel="alternate" type="text/html" title="Git 설정하기 (1) - 개행 설정하기" /><published>2022-09-10T00:00:00+00:00</published><updated>2022-09-10T00:00:00+00:00</updated><id>/git-config-crlf</id><content type="html" xml:base="/git-config-crlf">&lt;h1 id=&quot;눈에-보이지-않는-변경사항&quot;&gt;눈에 보이지 않는 변경사항&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Editor 는 보통 문단관련 예약어를 동작으로써 적용합니다. &lt;br /&gt;
실제로 사용한 간격(Whitespace) 예약어가 Space(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\s&lt;/code&gt;) 인지 Tab(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\t&lt;/code&gt;) 인지 바로 확인하기 힘듭니다.&lt;br /&gt;
이 경우엔 개발자가 직접 간격을 이동하면서 확인할 수는 있습니다. &lt;br /&gt;
사실 둘 중 무엇이든 코드동작에 차이점도 없기에 무관합니다. &lt;br /&gt;
하지만 개행(End of Line)과 같이 코드동작에 영향을 준다면 말이 달라집니다.&lt;br /&gt;
개행은 Operation System 에 맞지 않을 경우 File Read 와 Execute 가 실패하게 만들며, &lt;br /&gt;
Editor 화면으로는 CRLF(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;) 인지 LF(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;) 인지 확인할 수 없습니다.&lt;br /&gt;
특히 코드작업을 하다보면 습관적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + S&lt;/code&gt; 로 저장하게 되는데, &lt;br /&gt;
이후 편리상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; 과 같은 Recursive 한 옵션으로 무책임하게 Commit 을 추가한다면 &lt;br /&gt;
아무도 모르게 잘못된 개행정보가 Git 에 적용될 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;개행에-대해서&quot;&gt;개행에 대해서&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 문제 해결에 앞서서 개행에 관련된 주변지식을 공유합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;eol&quot;&gt;EOL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End of line&lt;/code&gt; 을 뜻한다.&lt;/li&gt;
  &lt;li&gt;어셈블리 명령 처리부터 코드를 작성하는 텍스트 편집기까지 문자데이터 관리에 사용된다.&lt;/li&gt;
  &lt;li&gt;이들은 CRLF 로 표현된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crlf-란-&quot;&gt;CRLF 란 ?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CRLF 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Carriage Return&lt;/code&gt; 과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line Feed&lt;/code&gt; 를 말한다.&lt;/li&gt;
  &lt;li&gt;이들은 옛 타자기 사용방법에서 유래됐다.&lt;/li&gt;
  &lt;li&gt;기존 타자기는 한 줄을 작성한 뒤, 커서를 앞단으로 이동시킨 후에 아랫줄로 이동했다.&lt;/li&gt;
  &lt;li&gt;Carriage Return 는 커서를 앞단으로 이동시키는 행위 또는 키를 말한다.&lt;/li&gt;
  &lt;li&gt;Line Feed 는 아랫줄로 한칸 이동하는 행위 또는 키를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영체제별-crlf-가-다른-이유&quot;&gt;운영체제별 CRLF 가 다른 이유&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;CRLF 는 Text 문서의 줄변환(EOL) 예약어로 사용된다.&lt;br /&gt;
이때 CR 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/r&lt;/code&gt; , LF 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/n&lt;/code&gt; 로 표현된다.&lt;br /&gt;
하지만 이들 중 CR 가 줄변환 예약어로 사용되는 것은 운영체제별로 상이하다.&lt;br /&gt;
DOS 계열의 경우 CRLF 을 전부 표시하여 사용한다.&lt;br /&gt;
UNIX 계열의 경우 LF 만을 표시하여 사용한다.&lt;br /&gt;
이러한 이유는 장치의 발전과 관련된다.&lt;br /&gt;
시대적으로 빠른 UNIX 는 저장공간을 줄이기 위해 LF 만을 차용헀고,&lt;br /&gt;
이후 나온 DOS 는 CP/M 의 방식을 따르는데, &lt;br /&gt;
CP/M 은 시리얼라인(직렬통신)으로 터미널을 연결했기에 화면전환이 느렸다.&lt;br /&gt;
때문에 느린 스크롤 속도와 보조를 맞추는 목적으로 CR 을 추가했다.&lt;br /&gt;
즉 이들의 파생인 Linux, Windows 도 각각의 이전 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;관례&lt;/code&gt;를 유지하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;설정방법&quot;&gt;설정방법&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음은 개행문제를 회피하기 위한 설정방법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1-coreautocrlf-defaultfalse&quot;&gt;1. core.autocrlf (default=false)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;변환합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;교차플랫폼으로 협업할 경우 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf input
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
      &lt;th&gt;교차플랫폼 협업&lt;/th&gt;
      &lt;th&gt;사용자&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 은 CRLF , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 은 LF&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;Windows 계열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;input&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 만 LF&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;Unix 계열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;Windows 또는 Unix 계열&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;2-coreeol-defaultnative&quot;&gt;2. core.eol (default=native)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;지정합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;단일플랫폼으로 협업할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;강제&lt;/code&gt; 를 목적으로 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol native
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol crlf
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.eol lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;native&lt;/td&gt;
      &lt;td&gt;사용자 시스템의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;crlf&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crlf&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lf&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lf&lt;/code&gt; 방식을 사용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;3-coresafecrlf-defaultnative&quot;&gt;3. core.safecrlf (default=native)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 을 기점으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 방식을 &lt;strong&gt;제어합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crlf -&amp;gt; lf -&amp;gt; crlf&lt;/code&gt; 변환 후의 데이터 차이로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt; 교차사용을 판단합니다.&lt;/li&gt;
  &lt;li&gt;교차사용 확인시 중단 유무를 설정합니다.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;* false 일 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;autocrlf&lt;/code&gt; 의 설정을 수행합니다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설정 종류&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf warn
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;설정&lt;/th&gt;
      &lt;th&gt;동작&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;중단&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;warn&lt;/td&gt;
      &lt;td&gt;경고 후 진행&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>on-Sync</name></author><category term="Git" /><summary type="html">눈에 보이지 않는 변경사항</summary></entry><entry><title type="html">GitHub Pages 블로그 만들기 (1)</title><link href="/github-page-jekyll-jasper-1" rel="alternate" type="text/html" title="GitHub Pages 블로그 만들기 (1)" /><published>2022-08-15T00:00:00+00:00</published><updated>2022-08-15T00:00:00+00:00</updated><id>/github-page-jekyll-jasper-1</id><content type="html" xml:base="/github-page-jekyll-jasper-1">&lt;h1 id=&quot;github-pages-란-&quot;&gt;GitHub Pages 란 ?&lt;/h1&gt;

&lt;p&gt;GitHub Pages 는 Jekyll 과 같은 웹빌더 환경을 제공하는 서비스입니다.&lt;/p&gt;

&lt;h2 id=&quot;github-pages-사용방법&quot;&gt;GitHub Pages 사용방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이 서비스는 기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 형식의 이름을 갖는 저장소를 생성합니다.&lt;/li&gt;
  &lt;li&gt;저장소 생성 후에는 설정에서 Pages 브랜치를 지정합니다. 이때, GitHub 은 자동으로 업로드된 소스에서 웹빌더를 파악하여 정적 웹파일을 생성 및 제공합니다.&lt;/li&gt;
  &lt;li&gt;기본 URL 은 저장소의 이름인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; 로 노출되며, 추가 설정으로 변경할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyll-사용하기&quot;&gt;Jekyll 사용하기&lt;/h2&gt;

&lt;h3 id=&quot;github-pages-제공버전&quot;&gt;GitHub Pages 제공버전&lt;/h3&gt;

&lt;p&gt;Jekyll 은 Ruby 기반의 웹빌더입니다.
GitHub Pages 에서는 Ruby 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.4&lt;/code&gt;, Jekyll 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.9.2&lt;/code&gt; 버전으로 제공하고 있습니다.
참고로 현재 최신 Ruby 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.x.x&lt;/code&gt;, Jekyll 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.x.x&lt;/code&gt; 이상 버전이므로, 의존성에 맞는 버전을 사용해야합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상세항목은 &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;GitHub Page`s Dependency versions&lt;/a&gt; 를 참고하시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jekyll-작업환경-만들기&quot;&gt;Jekyll 작업환경 만들기&lt;/h3&gt;

&lt;p&gt;GitHub Pages 의 단점은 Commit 시점 기준으로 정적파일을 재빌드하고, 오류사항을 제공하지 않습니다.
그렇기에 개발자는 로컬에서 정상여부를 확인한 후에 저장소에 푸시하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;Ruby 와 Jekyll 를 위에 명시된 의존성에 맞게 직접 설치해도 되지만,
여기서는 Docker 를 사용하여 간편하게 구성해보겠습니다.&lt;/p&gt;

&lt;p&gt;우선 기본 베이스는 Ruby 이미지를 사용합니다.
물론 Jekyll 이미지도 DockerHub 에 존재하지만,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.9.2&lt;/code&gt; 버전이 없어서 디자인되어 공유되는 Jekyll 스킨을 사용할 때
피곤해지기에 저는 Ruby 이미지를 베이스로 사용하는 것을 추천합니다.&lt;/p&gt;

&lt;p&gt;우리가 사용할 베이스 버전은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby:2.7-alpine3.16&lt;/code&gt; 입니다.
Ruby 에서는 언어 특성상 고가용성보단 저사양 효율성에 알맞기에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50MB&lt;/code&gt;의 가벼운 alpine os 로 이미지를 제공합니다.&lt;/p&gt;

&lt;p&gt;alpine 에서는 OS 패키지 매니저로 apk 를 사용합니다.
기본적인 개발환경은 apk 를 사용하여 설치합니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apk update
apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; build-base gcc cmake git curl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 후 Ruby 패키지 매니저인 gem 을 통해서 Jekyll 및 Bundler 를 설치해줍니다.
버전은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.9.2&lt;/code&gt; 를 지정하는 것이 심신건강에 좋습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem update bundler &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 3.9.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적인 환경이 완성되었다면, Jekyll 을 사용하여 새로운 웹 프로젝트를 만들거나 오픈소스로 디자인된 스킨들을 활용합니다.
저는 미적감각이 없으므로 &lt;a href=&quot;http://jekyllthemes.org/themes/jasper2/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jasper2&lt;/code&gt;&lt;/a&gt; 를 사용하겠습니다.
링크에서 Hompage 를 누르면 GitHub 저장소로 이동하게 됩니다.
다음과 같이 소스를 로컬에 Clone 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/jekyllt/jasper2.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치된 웹프로젝트에는 기본적으로 Gemfile 에 몇가지 의존성 설정이 되어있습니다.
없어도 기본적인 의존성을 설치해야 하기에 bundler 로 Gem (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby 의 모듈단위&lt;/code&gt;) 들을 다운로드받습니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundler &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 생략하고 Jekyll 을 실행해도 좋지만, 종종 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Required&lt;/code&gt; 오류를 만날 수 있습니다. (e.g. webrick)
이때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundler add {설치요구대상}&lt;/code&gt; 로 해당 요구항목을 Gemfile 의존성에 추가하여 실행합니다.&lt;/p&gt;

&lt;p&gt;의존성 설치까지 완료되었다면 다음 명령어로 Jekyll 을 실행해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundler &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 3.9.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러 버전의 jekyll 이 설치되어있다면 버전을 명시해주면 됩니다.
참고로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; 를 바로 사용한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 명시된 jekyll 버전을 사용하기에 의존성 문제를 겪을 수 있습니다.&lt;/p&gt;

&lt;p&gt;만약 Docker 로 실행할 경우, 기본 IP 가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; 로 지정되니,
Host 에서 접근가능하도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--host 0.0.0.0&lt;/code&gt; 을 추가합니다.&lt;/p&gt;

&lt;p&gt;추가로 디버깅에 유용한 옵션으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--livereload&lt;/code&gt; 를 명시하면 html, css 같은 정적인 파일이 수정되었을 때,
Jekyll 재 실행 없이, 웹화면을 변경시킵니다. 이 옵션이 정상적으로 작동하지 않는다면
파일변경 이벤트를 캐치하지 못하여 Regenerate 를 하지 않았거나
이벤트 연결포트(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default: 35729&lt;/code&gt;) 가 닫혀있을 수 있습니다.
후자는 포트를 열어주면 되고, 전자의 경우 권한이나 여러문제가 있겠지만
기본적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force-polling&lt;/code&gt; 옵션을 추가해주면 해결됩니다.&lt;/p&gt;

&lt;p&gt;지금까지의 모든 작업내용을 Docker 로 옮기면 다음과 같습니다.&lt;/p&gt;

&lt;h4 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.7-alpine3.16

LABEL &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitpages-jekyll&quot;&lt;/span&gt;
LABEL &lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;putstack@gmail.com&quot;&lt;/span&gt;
LABEL &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# update package manager &amp;amp; install default program&lt;/span&gt;
RUN apk update
RUN apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; build-base gcc cmake git curl

&lt;span class=&quot;c&quot;&gt;# install bundler&lt;/span&gt;
RUN gem update bundler &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# git-pages latest support version (newest is upper 4.2.x, but not supported)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 3.9.2

&lt;span class=&quot;c&quot;&gt;# setting entrypoint&lt;/span&gt;
COPY entrypoint.sh /usr/local/bin/entrypoint
WORKDIR /srv/jasper2
ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entrypoint&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;entrypointsh&quot;&gt;entrypoint.sh&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

bundle &lt;span class=&quot;nb&quot;&gt;install

&lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 완료했다면 Jekyll 의 Docker 기반 로컬개발환경은 준비완료되었습니다.
관련 소스는 &lt;a href=&quot;https://github.com/MyBestPractice/dockerfile-factory/tree/master/gitpages-jekyll&quot;&gt;putstack/gitpages-jekyll 이미지의 생성파일&lt;/a&gt;
과 &lt;a href=&quot;https://github.com/MyBestPractice/dockerfile-factory/blob/master/.idea/runConfigurations/gitpages_jekyll_Dockerfile.xml&quot;&gt;putstack/gitpages-jekyll 이미지의 컨테이너 실행시 환경설정&lt;/a&gt;
에 올려두었습니다.&lt;/p&gt;

&lt;p&gt;다음에는 한글폰트를 지정하여 이쁜 글씨로 &lt;strong&gt;포스팅 하는 방법&lt;/strong&gt; 에 대해 얘기해보겠습니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;</content><author><name>on-Sync</name></author><category term="Blog" /><category term="GitHub" /><category term="Daily" /><summary type="html">GitHub Pages 란 ?</summary></entry></feed>